//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Migatsu {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Products")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Products : global::System.Data.DataSet {
        
        private FINALVIEWINVENTORYDataTable tableFINALVIEWINVENTORY;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Products() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Products(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FINALVIEWINVENTORY"] != null)) {
                    base.Tables.Add(new FINALVIEWINVENTORYDataTable(ds.Tables["FINALVIEWINVENTORY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FINALVIEWINVENTORYDataTable FINALVIEWINVENTORY {
            get {
                return this.tableFINALVIEWINVENTORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Products cln = ((Products)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FINALVIEWINVENTORY"] != null)) {
                    base.Tables.Add(new FINALVIEWINVENTORYDataTable(ds.Tables["FINALVIEWINVENTORY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFINALVIEWINVENTORY = ((FINALVIEWINVENTORYDataTable)(base.Tables["FINALVIEWINVENTORY"]));
            if ((initTable == true)) {
                if ((this.tableFINALVIEWINVENTORY != null)) {
                    this.tableFINALVIEWINVENTORY.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Products";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Products.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFINALVIEWINVENTORY = new FINALVIEWINVENTORYDataTable();
            base.Tables.Add(this.tableFINALVIEWINVENTORY);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFINALVIEWINVENTORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Products ds = new Products();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FINALVIEWINVENTORYRowChangeEventHandler(object sender, FINALVIEWINVENTORYRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FINALVIEWINVENTORYDataTable : global::System.Data.TypedTableBase<FINALVIEWINVENTORYRow> {
            
            private global::System.Data.DataColumn columnproduct_id;
            
            private global::System.Data.DataColumn columnProduct_Name;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnBrand;
            
            private global::System.Data.DataColumn columnUnit_ID;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnSize_ID;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnColor_ID;
            
            private global::System.Data.DataColumn columnColor;
            
            private global::System.Data.DataColumn columnCategory_ID;
            
            private global::System.Data.DataColumn columnCategory_Name;
            
            private global::System.Data.DataColumn columnSub_Category_ID;
            
            private global::System.Data.DataColumn columnSub_Category_Name;
            
            private global::System.Data.DataColumn columnSpecial_Feature_ID;
            
            private global::System.Data.DataColumn columnSpecial_Feature;
            
            private global::System.Data.DataColumn columnDate_Created;
            
            private global::System.Data.DataColumn columnDate_Modified;
            
            private global::System.Data.DataColumn columnModified_By_Profile_ID;
            
            private global::System.Data.DataColumn columnCreated_By_Profile_ID;
            
            private global::System.Data.DataColumn columnquantity_purchase;
            
            private global::System.Data.DataColumn columnquantity_order;
            
            private global::System.Data.DataColumn columnquantity_damage;
            
            private global::System.Data.DataColumn columnquantity_sample;
            
            private global::System.Data.DataColumn columnquantity_deduct_transfer;
            
            private global::System.Data.DataColumn columnquantity_ADD_transfer;
            
            private global::System.Data.DataColumn columnquantity_total;
            
            private global::System.Data.DataColumn columnIsArchived;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYDataTable() {
                this.TableName = "FINALVIEWINVENTORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FINALVIEWINVENTORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FINALVIEWINVENTORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn product_idColumn {
                get {
                    return this.columnproduct_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BrandColumn {
                get {
                    return this.columnBrand;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Unit_IDColumn {
                get {
                    return this.columnUnit_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_IDColumn {
                get {
                    return this.columnSize_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Color_IDColumn {
                get {
                    return this.columnColor_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_IDColumn {
                get {
                    return this.columnCategory_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Category_NameColumn {
                get {
                    return this.columnCategory_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sub_Category_IDColumn {
                get {
                    return this.columnSub_Category_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Sub_Category_NameColumn {
                get {
                    return this.columnSub_Category_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Special_Feature_IDColumn {
                get {
                    return this.columnSpecial_Feature_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Special_FeatureColumn {
                get {
                    return this.columnSpecial_Feature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_CreatedColumn {
                get {
                    return this.columnDate_Created;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_ModifiedColumn {
                get {
                    return this.columnDate_Modified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Modified_By_Profile_IDColumn {
                get {
                    return this.columnModified_By_Profile_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Created_By_Profile_IDColumn {
                get {
                    return this.columnCreated_By_Profile_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_purchaseColumn {
                get {
                    return this.columnquantity_purchase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_orderColumn {
                get {
                    return this.columnquantity_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_damageColumn {
                get {
                    return this.columnquantity_damage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_sampleColumn {
                get {
                    return this.columnquantity_sample;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_deduct_transferColumn {
                get {
                    return this.columnquantity_deduct_transfer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_ADD_transferColumn {
                get {
                    return this.columnquantity_ADD_transfer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn quantity_totalColumn {
                get {
                    return this.columnquantity_total;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsArchivedColumn {
                get {
                    return this.columnIsArchived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYRow this[int index] {
                get {
                    return ((FINALVIEWINVENTORYRow)(this.Rows[index]));
                }
            }
            
            public event FINALVIEWINVENTORYRowChangeEventHandler FINALVIEWINVENTORYRowChanging;
            
            public event FINALVIEWINVENTORYRowChangeEventHandler FINALVIEWINVENTORYRowChanged;
            
            public event FINALVIEWINVENTORYRowChangeEventHandler FINALVIEWINVENTORYRowDeleting;
            
            public event FINALVIEWINVENTORYRowChangeEventHandler FINALVIEWINVENTORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFINALVIEWINVENTORYRow(FINALVIEWINVENTORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYRow AddFINALVIEWINVENTORYRow(
                        int product_id, 
                        string Product_Name, 
                        string Model, 
                        string Description, 
                        string Brand, 
                        int Unit_ID, 
                        string Unit, 
                        int Size_ID, 
                        string Size, 
                        int Color_ID, 
                        string Color, 
                        int Category_ID, 
                        string Category_Name, 
                        int Sub_Category_ID, 
                        string Sub_Category_Name, 
                        int Special_Feature_ID, 
                        string Special_Feature, 
                        System.DateTime Date_Created, 
                        System.DateTime Date_Modified, 
                        int Modified_By_Profile_ID, 
                        int Created_By_Profile_ID, 
                        int quantity_purchase, 
                        int quantity_order, 
                        int quantity_damage, 
                        int quantity_sample, 
                        int quantity_deduct_transfer, 
                        int quantity_ADD_transfer, 
                        int quantity_total, 
                        bool IsArchived) {
                FINALVIEWINVENTORYRow rowFINALVIEWINVENTORYRow = ((FINALVIEWINVENTORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        product_id,
                        Product_Name,
                        Model,
                        Description,
                        Brand,
                        Unit_ID,
                        Unit,
                        Size_ID,
                        Size,
                        Color_ID,
                        Color,
                        Category_ID,
                        Category_Name,
                        Sub_Category_ID,
                        Sub_Category_Name,
                        Special_Feature_ID,
                        Special_Feature,
                        Date_Created,
                        Date_Modified,
                        Modified_By_Profile_ID,
                        Created_By_Profile_ID,
                        quantity_purchase,
                        quantity_order,
                        quantity_damage,
                        quantity_sample,
                        quantity_deduct_transfer,
                        quantity_ADD_transfer,
                        quantity_total,
                        IsArchived};
                rowFINALVIEWINVENTORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFINALVIEWINVENTORYRow);
                return rowFINALVIEWINVENTORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYRow FindByproduct_id(int product_id) {
                return ((FINALVIEWINVENTORYRow)(this.Rows.Find(new object[] {
                            product_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FINALVIEWINVENTORYDataTable cln = ((FINALVIEWINVENTORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FINALVIEWINVENTORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproduct_id = base.Columns["product id"];
                this.columnProduct_Name = base.Columns["Product_Name"];
                this.columnModel = base.Columns["Model"];
                this.columnDescription = base.Columns["Description"];
                this.columnBrand = base.Columns["Brand"];
                this.columnUnit_ID = base.Columns["Unit_ID"];
                this.columnUnit = base.Columns["Unit"];
                this.columnSize_ID = base.Columns["Size_ID"];
                this.columnSize = base.Columns["Size"];
                this.columnColor_ID = base.Columns["Color_ID"];
                this.columnColor = base.Columns["Color"];
                this.columnCategory_ID = base.Columns["Category_ID"];
                this.columnCategory_Name = base.Columns["Category_Name"];
                this.columnSub_Category_ID = base.Columns["Sub_Category_ID"];
                this.columnSub_Category_Name = base.Columns["Sub_Category_Name"];
                this.columnSpecial_Feature_ID = base.Columns["Special_Feature_ID"];
                this.columnSpecial_Feature = base.Columns["Special_Feature"];
                this.columnDate_Created = base.Columns["Date_Created"];
                this.columnDate_Modified = base.Columns["Date_Modified"];
                this.columnModified_By_Profile_ID = base.Columns["Modified_By_Profile_ID"];
                this.columnCreated_By_Profile_ID = base.Columns["Created_By_Profile_ID"];
                this.columnquantity_purchase = base.Columns["quantity purchase"];
                this.columnquantity_order = base.Columns["quantity order"];
                this.columnquantity_damage = base.Columns["quantity damage"];
                this.columnquantity_sample = base.Columns["quantity sample"];
                this.columnquantity_deduct_transfer = base.Columns["quantity deduct transfer"];
                this.columnquantity_ADD_transfer = base.Columns["quantity ADD transfer"];
                this.columnquantity_total = base.Columns["quantity total"];
                this.columnIsArchived = base.Columns["IsArchived"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproduct_id = new global::System.Data.DataColumn("product id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_id);
                this.columnProduct_Name = new global::System.Data.DataColumn("Product_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct_Name);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnBrand = new global::System.Data.DataColumn("Brand", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBrand);
                this.columnUnit_ID = new global::System.Data.DataColumn("Unit_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit_ID);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnSize_ID = new global::System.Data.DataColumn("Size_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_ID);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnColor_ID = new global::System.Data.DataColumn("Color_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor_ID);
                this.columnColor = new global::System.Data.DataColumn("Color", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnCategory_ID = new global::System.Data.DataColumn("Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_ID);
                this.columnCategory_Name = new global::System.Data.DataColumn("Category_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory_Name);
                this.columnSub_Category_ID = new global::System.Data.DataColumn("Sub_Category_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSub_Category_ID);
                this.columnSub_Category_Name = new global::System.Data.DataColumn("Sub_Category_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSub_Category_Name);
                this.columnSpecial_Feature_ID = new global::System.Data.DataColumn("Special_Feature_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecial_Feature_ID);
                this.columnSpecial_Feature = new global::System.Data.DataColumn("Special_Feature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecial_Feature);
                this.columnDate_Created = new global::System.Data.DataColumn("Date_Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_Created);
                this.columnDate_Modified = new global::System.Data.DataColumn("Date_Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_Modified);
                this.columnModified_By_Profile_ID = new global::System.Data.DataColumn("Modified_By_Profile_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified_By_Profile_ID);
                this.columnCreated_By_Profile_ID = new global::System.Data.DataColumn("Created_By_Profile_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated_By_Profile_ID);
                this.columnquantity_purchase = new global::System.Data.DataColumn("quantity purchase", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_purchase);
                this.columnquantity_order = new global::System.Data.DataColumn("quantity order", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_order);
                this.columnquantity_damage = new global::System.Data.DataColumn("quantity damage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_damage);
                this.columnquantity_sample = new global::System.Data.DataColumn("quantity sample", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_sample);
                this.columnquantity_deduct_transfer = new global::System.Data.DataColumn("quantity deduct transfer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_deduct_transfer);
                this.columnquantity_ADD_transfer = new global::System.Data.DataColumn("quantity ADD transfer", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_ADD_transfer);
                this.columnquantity_total = new global::System.Data.DataColumn("quantity total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnquantity_total);
                this.columnIsArchived = new global::System.Data.DataColumn("IsArchived", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsArchived);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnproduct_id}, true));
                this.columnproduct_id.AllowDBNull = false;
                this.columnproduct_id.Unique = true;
                this.columnProduct_Name.AllowDBNull = false;
                this.columnProduct_Name.MaxLength = 200;
                this.columnModel.MaxLength = 200;
                this.columnDescription.MaxLength = 500;
                this.columnBrand.MaxLength = 50;
                this.columnUnit.MaxLength = 50;
                this.columnSize.MaxLength = 50;
                this.columnColor.MaxLength = 50;
                this.columnCategory_ID.AllowDBNull = false;
                this.columnCategory_Name.MaxLength = 100;
                this.columnSub_Category_Name.MaxLength = 100;
                this.columnSpecial_Feature.MaxLength = 200;
                this.columnquantity_purchase.ReadOnly = true;
                this.columnquantity_order.ReadOnly = true;
                this.columnquantity_damage.ReadOnly = true;
                this.columnquantity_sample.ReadOnly = true;
                this.columnquantity_deduct_transfer.ReadOnly = true;
                this.columnquantity_ADD_transfer.ReadOnly = true;
                this.columnquantity_total.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYRow NewFINALVIEWINVENTORYRow() {
                return ((FINALVIEWINVENTORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FINALVIEWINVENTORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FINALVIEWINVENTORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FINALVIEWINVENTORYRowChanged != null)) {
                    this.FINALVIEWINVENTORYRowChanged(this, new FINALVIEWINVENTORYRowChangeEvent(((FINALVIEWINVENTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FINALVIEWINVENTORYRowChanging != null)) {
                    this.FINALVIEWINVENTORYRowChanging(this, new FINALVIEWINVENTORYRowChangeEvent(((FINALVIEWINVENTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FINALVIEWINVENTORYRowDeleted != null)) {
                    this.FINALVIEWINVENTORYRowDeleted(this, new FINALVIEWINVENTORYRowChangeEvent(((FINALVIEWINVENTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FINALVIEWINVENTORYRowDeleting != null)) {
                    this.FINALVIEWINVENTORYRowDeleting(this, new FINALVIEWINVENTORYRowChangeEvent(((FINALVIEWINVENTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFINALVIEWINVENTORYRow(FINALVIEWINVENTORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Products ds = new Products();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FINALVIEWINVENTORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FINALVIEWINVENTORYRow : global::System.Data.DataRow {
            
            private FINALVIEWINVENTORYDataTable tableFINALVIEWINVENTORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FINALVIEWINVENTORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFINALVIEWINVENTORY = ((FINALVIEWINVENTORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int product_id {
                get {
                    return ((int)(this[this.tableFINALVIEWINVENTORY.product_idColumn]));
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.product_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product_Name {
                get {
                    return ((string)(this[this.tableFINALVIEWINVENTORY.Product_NameColumn]));
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Product_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Brand {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.BrandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Brand\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.BrandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Unit_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Unit_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit_ID\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Unit_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Size_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Size_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_ID\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Size_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Color_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Color_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Color_ID\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Color_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Color {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.ColorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Color\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.ColorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Category_ID {
                get {
                    return ((int)(this[this.tableFINALVIEWINVENTORY.Category_IDColumn]));
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Category_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category_Name {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.Category_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category_Name\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Category_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sub_Category_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Sub_Category_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sub_Category_ID\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Sub_Category_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sub_Category_Name {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.Sub_Category_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sub_Category_Name\' in table \'FINALVIEWINVENTORY\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Sub_Category_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Special_Feature_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Special_Feature_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Special_Feature_ID\' in table \'FINALVIEWINVENTORY\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Special_Feature_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Special_Feature {
                get {
                    try {
                        return ((string)(this[this.tableFINALVIEWINVENTORY.Special_FeatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Special_Feature\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Special_FeatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFINALVIEWINVENTORY.Date_CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_Created\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Date_CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFINALVIEWINVENTORY.Date_ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_Modified\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Date_ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Modified_By_Profile_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Modified_By_Profile_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified_By_Profile_ID\' in table \'FINALVIEWINVENTORY\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Modified_By_Profile_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Created_By_Profile_ID {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.Created_By_Profile_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created_By_Profile_ID\' in table \'FINALVIEWINVENTORY\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.Created_By_Profile_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_purchase {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_purchaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity purchase\' in table \'FINALVIEWINVENTORY\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_purchaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_order {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_orderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity order\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_damage {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_damageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity damage\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_damageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_sample {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_sampleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity sample\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_sampleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_deduct_transfer {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_deduct_transferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity deduct transfer\' in table \'FINALVIEWINVENTORY\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_deduct_transferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_ADD_transfer {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_ADD_transferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity ADD transfer\' in table \'FINALVIEWINVENTORY\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_ADD_transferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int quantity_total {
                get {
                    try {
                        return ((int)(this[this.tableFINALVIEWINVENTORY.quantity_totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'quantity total\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.quantity_totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchived {
                get {
                    try {
                        return ((bool)(this[this.tableFINALVIEWINVENTORY.IsArchivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsArchived\' in table \'FINALVIEWINVENTORY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFINALVIEWINVENTORY.IsArchivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableFINALVIEWINVENTORY.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableFINALVIEWINVENTORY.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBrandNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.BrandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBrandNull() {
                this[this.tableFINALVIEWINVENTORY.BrandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnit_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Unit_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnit_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Unit_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableFINALVIEWINVENTORY.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Size_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Size_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableFINALVIEWINVENTORY.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColor_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Color_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColor_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Color_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColorNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.ColorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColorNull() {
                this[this.tableFINALVIEWINVENTORY.ColorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategory_NameNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Category_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategory_NameNull() {
                this[this.tableFINALVIEWINVENTORY.Category_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSub_Category_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Sub_Category_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSub_Category_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Sub_Category_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSub_Category_NameNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Sub_Category_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSub_Category_NameNull() {
                this[this.tableFINALVIEWINVENTORY.Sub_Category_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecial_Feature_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Special_Feature_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecial_Feature_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Special_Feature_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpecial_FeatureNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Special_FeatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpecial_FeatureNull() {
                this[this.tableFINALVIEWINVENTORY.Special_FeatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_CreatedNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Date_CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_CreatedNull() {
                this[this.tableFINALVIEWINVENTORY.Date_CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_ModifiedNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Date_ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_ModifiedNull() {
                this[this.tableFINALVIEWINVENTORY.Date_ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModified_By_Profile_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Modified_By_Profile_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModified_By_Profile_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Modified_By_Profile_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreated_By_Profile_IDNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.Created_By_Profile_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreated_By_Profile_IDNull() {
                this[this.tableFINALVIEWINVENTORY.Created_By_Profile_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_purchaseNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_purchaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_purchaseNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_purchaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_orderNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_orderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_orderNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_orderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_damageNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_damageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_damageNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_damageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_sampleNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_sampleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_sampleNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_sampleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_deduct_transferNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_deduct_transferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_deduct_transferNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_deduct_transferColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_ADD_transferNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_ADD_transferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_ADD_transferNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_ADD_transferColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isquantity_totalNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.quantity_totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setquantity_totalNull() {
                this[this.tableFINALVIEWINVENTORY.quantity_totalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsArchivedNull() {
                return this.IsNull(this.tableFINALVIEWINVENTORY.IsArchivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsArchivedNull() {
                this[this.tableFINALVIEWINVENTORY.IsArchivedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FINALVIEWINVENTORYRowChangeEvent : global::System.EventArgs {
            
            private FINALVIEWINVENTORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYRowChangeEvent(FINALVIEWINVENTORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FINALVIEWINVENTORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Migatsu.ProductsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FINALVIEWINVENTORYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FINALVIEWINVENTORYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FINALVIEWINVENTORY";
            tableMapping.ColumnMappings.Add("product id", "product id");
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name");
            tableMapping.ColumnMappings.Add("Model", "Model");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Brand", "Brand");
            tableMapping.ColumnMappings.Add("Unit_ID", "Unit_ID");
            tableMapping.ColumnMappings.Add("Unit", "Unit");
            tableMapping.ColumnMappings.Add("Size_ID", "Size_ID");
            tableMapping.ColumnMappings.Add("Size", "Size");
            tableMapping.ColumnMappings.Add("Color_ID", "Color_ID");
            tableMapping.ColumnMappings.Add("Color", "Color");
            tableMapping.ColumnMappings.Add("Category_ID", "Category_ID");
            tableMapping.ColumnMappings.Add("Category_Name", "Category_Name");
            tableMapping.ColumnMappings.Add("Sub_Category_ID", "Sub_Category_ID");
            tableMapping.ColumnMappings.Add("Sub_Category_Name", "Sub_Category_Name");
            tableMapping.ColumnMappings.Add("Special_Feature_ID", "Special_Feature_ID");
            tableMapping.ColumnMappings.Add("Special_Feature", "Special_Feature");
            tableMapping.ColumnMappings.Add("Date_Created", "Date_Created");
            tableMapping.ColumnMappings.Add("Date_Modified", "Date_Modified");
            tableMapping.ColumnMappings.Add("Modified_By_Profile_ID", "Modified_By_Profile_ID");
            tableMapping.ColumnMappings.Add("Created_By_Profile_ID", "Created_By_Profile_ID");
            tableMapping.ColumnMappings.Add("quantity purchase", "quantity purchase");
            tableMapping.ColumnMappings.Add("quantity order", "quantity order");
            tableMapping.ColumnMappings.Add("quantity damage", "quantity damage");
            tableMapping.ColumnMappings.Add("quantity sample", "quantity sample");
            tableMapping.ColumnMappings.Add("quantity deduct transfer", "quantity deduct transfer");
            tableMapping.ColumnMappings.Add("quantity ADD transfer", "quantity ADD transfer");
            tableMapping.ColumnMappings.Add("quantity total", "quantity total");
            tableMapping.ColumnMappings.Add("IsArchived", "IsArchived");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Migatsu.Properties.Settings.Default.MIGATSUENTERPRISEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     [product id], Product_Name, Model, Description, Brand, Unit_ID, Unit, Size_ID, Size, Color_ID, Color, Category_ID, Category_Name, Sub_Category_ID, 
                      Sub_Category_Name, Special_Feature_ID, Special_Feature, Date_Created, Date_Modified, Modified_By_Profile_ID, Created_By_Profile_ID, SUM([quantity purchase]) 
                      AS [quantity purchase], SUM([quantity order]) AS [quantity order], SUM([quantity damage]) AS [quantity damage], SUM([quantity sample]) AS [quantity sample], 
                      SUM([quantity deduct transfer]) AS [quantity deduct transfer], SUM([quantity add transfer]) AS [quantity ADD transfer], SUM([total quantity]) AS [quantity total], 
                      IsArchived
FROM         dbo.FINALVIEWINVENTORY
GROUP BY [product id], Product_Name, Model, Description, Brand, Unit_ID, Unit, Size_ID, Size, Color_ID, Color, Category_ID, Category_Name, Sub_Category_ID, 
                      Sub_Category_Name, Special_Feature_ID, Special_Feature, Date_Created, Date_Modified, Modified_By_Profile_ID, Created_By_Profile_ID, IsArchived";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Products.FINALVIEWINVENTORYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Products.FINALVIEWINVENTORYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            Products.FINALVIEWINVENTORYDataTable dataTable = new Products.FINALVIEWINVENTORYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(Products dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(Products dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(Products dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(Products dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591